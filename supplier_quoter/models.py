# generated by datamodel-codegen:
#   filename:  rfq-v1.json
#   timestamp: 2024-06-03T12:00:00+00:00 # Placeholder timestamp

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import List, Union, Any, Dict, Optional

from pydantic import BaseModel, Field, conint


class BomItem(BaseModel):
    partNumber: str
    qty: conint(ge=1)
    spec: str


class Currency(Enum):
    USD = 'USD'
    EUR = 'EUR'
    JPY = 'JPY'


class SubmitRFQ(BaseModel):
    bom: List[BomItem]
    currency: Currency
    deadline: date


# generated by datamodel-codegen:
#   filename:  quote-v1.json
#   timestamp: 2024-06-03T12:00:00+00:00 # Placeholder timestamp

# schema type: SubmitQuote (renamed to Quote to avoid conflict with shared pydantic model name)

class QuotedItem(BaseModel):
    partNumber: str
    quantity: conint(ge=1)
    unitPrice: float = Field(..., exclusiveMinimum=0.0)
    leadTimeDays: conint(ge=0)


class Quote(BaseModel):
    rfqId: str = Field(..., description='ID of the original RFQ')
    supplierId: str = Field(..., description='Identifier for the supplier')
    items: List[QuotedItem]
    totalPrice: float = Field(..., exclusiveMinimum=0.0)
    currency: Currency # Reusing Currency enum from RFQ schema 
    validUntil: date # Add the missing validUntil field 

# JSON-RPC Models
class JsonRpcRequest(BaseModel):
    jsonrpc: str = "2.0"
    id: Union[str, int]
    method: str
    params: SubmitRFQ # For SubmitRFQ action; could be Union of other param types for other methods

class JsonRpcErrorDetail(BaseModel):
    code: int
    message: str
    data: Optional[Any] = None

class JsonRpcSuccessResponse(BaseModel):
    jsonrpc: str = "2.0"
    id: Union[str, int]
    result: Quote # Specific to returning a Quote

class JsonRpcErrorResponse(BaseModel):
    jsonrpc: str = "2.0"
    id: Union[str, int, None] # ID can be null for some errors as per JSON-RPC spec
    error: JsonRpcErrorDetail 